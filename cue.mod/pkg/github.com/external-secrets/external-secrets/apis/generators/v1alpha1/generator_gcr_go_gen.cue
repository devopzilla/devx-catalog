// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/external-secrets/external-secrets/apis/generators/v1alpha1

package v1alpha1

import (
	esmeta "github.com/external-secrets/external-secrets/apis/meta/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#GCRAccessTokenSpec: {
	// Auth defines the means for authenticating with GCP
	auth: #GCPSMAuth @go(Auth)

	// ProjectID defines which project to use to authenticate with
	projectID: string @go(ProjectID)
}

#GCPSMAuth: {
	// +optional
	secretRef?: null | #GCPSMAuthSecretRef @go(SecretRef,*GCPSMAuthSecretRef)

	// +optional
	workloadIdentity?: null | #GCPWorkloadIdentity @go(WorkloadIdentity,*GCPWorkloadIdentity)
}

#GCPSMAuthSecretRef: {
	// The SecretAccessKey is used for authentication
	// +optional
	secretAccessKeySecretRef?: esmeta.#SecretKeySelector @go(SecretAccessKey)
}

#GCPWorkloadIdentity: {
	serviceAccountRef: esmeta.#ServiceAccountSelector @go(ServiceAccountRef)
	clusterLocation:   string                         @go(ClusterLocation)
	clusterName:       string                         @go(ClusterName)
	clusterProjectID?: string                         @go(ClusterProjectID)
}

// GCRAccessToken generates an GCP access token
// that can be used to authenticate with GCR.
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Namespaced,categories={gcraccesstoken},shortName=gcraccesstoken
#GCRAccessToken: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta  @go(ObjectMeta)
	spec?:     #GCRAccessTokenSpec @go(Spec)
}

// GCRAccessTokenList contains a list of ExternalSecret resources.
#GCRAccessTokenList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GCRAccessToken] @go(Items,[]GCRAccessToken)
}
