// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/external-secrets/external-secrets/apis/generators/v1alpha1

package v1alpha1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.
#WebhookSpec: {
	// Webhook Method
	// +optional, default GET
	method?: string @go(Method)

	// Webhook url to call
	url: string @go(URL)

	// Headers
	// +optional
	headers?: {[string]: string} @go(Headers,map[string]string)

	// Body
	// +optional
	body?: string @go(Body)

	// Timeout
	// +optional
	timeout?: null | metav1.#Duration @go(Timeout,*metav1.Duration)

	// Result formatting
	result: #WebhookResult @go(Result)

	// Secrets to fill in templates
	// These secrets will be passed to the templating function as key value pairs under the given name
	// +optional
	secrets?: [...#WebhookSecret] @go(Secrets,[]WebhookSecret)

	// PEM encoded CA bundle used to validate webhook server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
	// +optional
	caBundle?: bytes @go(CABundle,[]byte)

	// The provider for the CA bundle to use to validate webhook server certificate.
	// +optional
	caProvider?: null | #WebhookCAProvider @go(CAProvider,*WebhookCAProvider)
}

#WebhookCAProviderType: string // #enumWebhookCAProviderType

#enumWebhookCAProviderType:
	#WebhookCAProviderTypeSecret |
	#WebhookCAProviderTypeConfigMap

#WebhookCAProviderTypeSecret:    #WebhookCAProviderType & "Secret"
#WebhookCAProviderTypeConfigMap: #WebhookCAProviderType & "ConfigMap"

// Defines a location to fetch the cert for the webhook provider from.
#WebhookCAProvider: {
	// The type of provider to use such as "Secret", or "ConfigMap".
	// +kubebuilder:validation:Enum="Secret";"ConfigMap"
	type: #WebhookCAProviderType @go(Type)

	// The name of the object located at the provider type.
	name: string @go(Name)

	// The key the value inside of the provider type to use, only used with "Secret" type
	// +kubebuilder:validation:Optional
	key?: string @go(Key)

	// The namespace the Provider type is in.
	// +optional
	namespace?: null | string @go(Namespace,*string)
}

#WebhookResult: {
	// Json path of return value
	// +optional
	jsonPath?: string @go(JSONPath)
}

#WebhookSecret: {
	// Name of this secret in templates
	name: string @go(Name)

	// Secret ref to fill in credentials
	secretRef: #SecretKeySelector @go(SecretRef)
}

#SecretKeySelector: {
	// The name of the Secret resource being referred to.
	name?: string @go(Name)

	// The key where the token is found.
	key?: string @go(Key)
}

// Webhook connects to a third party API server to handle the secrets generation
// configuration parameters in spec.
// You can specify the server, the token, and additional body parameters.
// See documentation for the full API specification for requests and responses.
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Namespaced,categories={webhook},shortName=webhookl
#Webhook: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #WebhookSpec       @go(Spec)
}

// ExternalList contains a list of Webhook Generator resources.
#WebhookList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Webhook] @go(Items,[]Webhook)
}
