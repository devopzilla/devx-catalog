// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/external-secrets/external-secrets/apis/generators/v1alpha1

package v1alpha1

import (
	apiextensions "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	esv1beta1 "github.com/external-secrets/external-secrets/apis/externalsecrets/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#VaultDynamicSecretSpec: {
	// Used to select the correct ESO controller (think: ingress.ingressClassName)
	// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
	// +optional
	controller?: string @go(Controller)

	// Vault API method to use (GET/POST/other)
	method?: string @go(Method)

	// Parameters to pass to Vault write (for non-GET methods)
	parameters?: null | apiextensions.#JSON @go(Parameters,*apiextensions.JSON)

	// Result type defines which data is returned from the generator.
	// By default it is the "data" section of the Vault API response.
	// When using e.g. /auth/token/create the "data" section is empty but
	// the "auth" section contains the generated token.
	// Please refer to the vault docs regarding the result data structure.
	// +kubebuilder:default=Data
	resultType?: #VaultDynamicSecretResultType @go(ResultType)

	// Vault provider common spec
	provider?: null | esv1beta1.#VaultProvider @go(Provider,*esv1beta1.VaultProvider)

	// Vault path to obtain the dynamic secret from
	path: string @go(Path)
}

// +kubebuilder:validation:Enum=Data;Auth
#VaultDynamicSecretResultType: string // #enumVaultDynamicSecretResultType

#enumVaultDynamicSecretResultType:
	#VaultDynamicSecretResultTypeData |
	#VaultDynamicSecretResultTypeAuth

#VaultDynamicSecretResultTypeData: #VaultDynamicSecretResultType & "Data"
#VaultDynamicSecretResultTypeAuth: #VaultDynamicSecretResultType & "Auth"

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Namespaced,categories={vaultdynamicsecret},shortName=vaultdynamicsecret
#VaultDynamicSecret: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta      @go(ObjectMeta)
	spec?:     #VaultDynamicSecretSpec @go(Spec)
}

// +kubebuilder:object:root=true
#VaultDynamicSecretList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VaultDynamicSecret] @go(Items,[]VaultDynamicSecret)
}
