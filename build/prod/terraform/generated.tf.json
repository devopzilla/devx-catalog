{
  "data": {
    "azurerm_kubernetes_service_versions": {
      "ObservTest": {
        "version_prefix": "1.29.",
        "location": "East US"
      }
    }
  },
  "provider": {
    "azurerm": {
      "features": {}
    },
    "helm": {
      "kubernetes": {
        "config_path": "~/.kube/config"
      }
    }
  },
  "terraform": {
    "required_providers": {
      "azurerm": {
        "source": "hashicorp/azurerm",
        "version": "3.106.1"
      }
    }
  },
  "resource": {
    "azurerm_resource_group": {
      "ObservTest-resource-group": {
        "name": "k8s-rg",
        "location": "East US"
      }
    },
    "azurerm_kubernetes_cluster": {
      "ObservTest": {
        "name": "ObservTest",
        "location": "East US",
        "resource_group_name": "${azurerm_resource_group.ObservTest-resource-group.name}",
        "kubernetes_version": "${data.azurerm_kubernetes_service_versions.ObservTest.latest_version}",
        "identity": {
          "type": "SystemAssigned"
        },
        "dns_prefix": "ObservTest",
        "default_node_pool": {
          "name": "workerpool1",
          "vm_size": "Standard_DS2_v2",
          "orchestrator_version": "${data.azurerm_kubernetes_service_versions.ObservTest.latest_version}",
          "enable_auto_scaling": true,
          "tags": {
            "name": "workerpool1",
            "source": "terraform"
          },
          "min_count": 1,
          "temporary_name_for_rotation": "temppool1",
          "max_count": 3
        }
      }
    },
    "helm_release": {
      "prometheus": {
        "name": "prometheus",
        "namespace": "monitoring",
        "repository": "https://prometheus-community.github.io/helm-charts",
        "chart": "prometheus",
        "version": "25.26.0",
        "timeout": 600,
        "atomic": true,
        "create_namespace": true,
        "values": [
          "rbac:\n  create: true\npodSecurityPolicy:\n  enabled: false\nimagePullSecrets: []\ncommonMetaLabels: {}\nconfigmapReload:\n  reloadUrl: \"\"\n  env: []\n  prometheus:\n    enabled: true\n    name: configmap-reload\n    image:\n      repository: quay.io/prometheus-operator/prometheus-config-reloader\n      tag: v0.77.2\n      digest: \"\"\n      pullPolicy: IfNotPresent\n    containerPort: 8080\n    containerPortName: metrics\n    extraArgs: {}\n    extraVolumeDirs: []\n    extraVolumeMounts: []\n    extraConfigmapMounts: []\n    containerSecurityContext: {}\n    livenessProbe:\n      httpGet:\n        path: /healthz\n        port: 8080\n        scheme: HTTP\n      periodSeconds: 10\n      initialDelaySeconds: 2\n    readinessProbe:\n      httpGet:\n        path: /healthz\n        port: 8080\n        scheme: HTTP\n      periodSeconds: 10\n    startupProbe:\n      enabled: false\n      httpGet:\n        path: /healthz\n        port: 8080\n        scheme: HTTP\n      periodSeconds: 10\n    resources: {}\nserver:\n  name: server\n  image:\n    repository: quay.io/prometheus/prometheus\n    tag: \"\"\n    digest: \"\"\n    pullPolicy: IfNotPresent\n  global:\n    scrape_interval: 1m\n    scrape_timeout: 10s\n    evaluation_interval: 1m\n  resources:\n    limits:\n      cpu: 500m\n      memory: 512Mi\n    requests:\n      cpu: 500m\n      memory: 512Mi\n  podSecurityContext: {}\n  service:\n    enabled: true\n    type: ClusterIP\n    servicePort: 80\n  ingress:\n    enabled: false\n    annotations: null\n    hosts: []\n    path: /\n    tls: []\n  persistentVolume:\n    enabled: true\n    size: 8Gi\n    storageClass: \"\"\n    accessModes:\n      - ReadWriteOnce\n    mountPath: /data\n  alertmanager:\n    enabled: true\n    persistence:\n      enabled: true\n      size: 2Gi\n  kubeStateMetrics:\n    enabled: true\n  nodeExporter:\n    enabled: true\n  pushGateway:\n    enabled: true\n"
        ],
        "depends_on": []
      },
      "pixie": {
        "name": "pixie",
        "namespace": "pl",
        "repository": "https://pixie-operator-charts.storage.googleapis.com",
        "chart": "pixie-operator-chart",
        "version": "0.1.6",
        "timeout": 600,
        "atomic": true,
        "create_namespace": true,
        "values": [
          "deployOLM: \"\"\nclusterName: ObservTest\nolmNamespace: olm\nolmOperatorNamespace: px-operator\nolmBundleChannel: stable\nolmCatalogSource:\n  annotations: {}\n  labels: {}\nvizier:\n  name: pixie\n  clusterName: ObservTest\n  version: \"\"\n  deployKey: px-dep-7f20ab42-b199-418f-872b-f5a84378152f\n  disableAutoUpdate: false\n  useEtcdOperator: false\n  cloudAddr: withpixie.ai:443\n  devCloudNamespace: plc\n  pemMemoryLimit: \"\"\n  pemMemoryRequest: \"\"\n  dataAccess: Full\n  pod:\n    annotations: {}\n    labels: {}\n    resources:\n      limits:\n        cpu: 500m\n        memory: 2Gi\n      requests:\n        cpu: 100m\n        memory: 1Gi\n    nodeSelector: {}\n    tolerations: []\n"
        ],
        "depends_on": []
      },
      "loki": {
        "name": "loki",
        "namespace": "monitoring",
        "repository": "https://grafana.github.io/helm-charts",
        "chart": "loki-stack",
        "version": "2.10.2",
        "timeout": 600,
        "atomic": true,
        "create_namespace": true,
        "values": [
          "loki:\n  env:\n    - name: AWS_ACCESS_KEY_ID\n      valueFrom:\n        secretKeyRef:\n          name: iam-loki-s3\n          key: AWS_ACCESS_KEY_ID\n    - name: AWS_SECRET_ACCESS_KEY\n      valueFrom:\n        secretKeyRef:\n          name: iam-loki-s3\n          key: AWS_SECRET_ACCESS_KEY\n  config:\n    schema_config:\n      configs:\n        - from: \"2021-05-12\"\n          store: boltdb-shipper\n          object_store: s3\n          schema: v11\n          index:\n            prefix: loki_index_\n            period: 24h\n    storage_config:\n      aws:\n        s3: s3://us-east-1/observtest\n        s3forcepathstyle: true\n        bucketnames: observtest\n        region: us-east-1\n        insecure: false\n        sse_encryption: false\n      boltdb_shipper:\n        shared_store: s3\n        cache_ttl: 24h\npromtail:\n  enabled: true\n  config:\n    clients:\n      - url: http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push\n"
        ],
        "depends_on": []
      },
      "grafana": {
        "name": "grafana",
        "namespace": "monitoring",
        "repository": "https://grafana.github.io/helm-charts",
        "chart": "grafana",
        "version": "8.5.11",
        "timeout": 600,
        "atomic": true,
        "create_namespace": true,
        "values": [
          "global:\n  imageRegistry: null\n  imagePullSecrets: []\ngrafana:\n  enabled: true\n  isDefault: true\n  readinessProbe:\n    httpGet:\n      path: /api/health\n      port: 3000\n  livenessProbe:\n    httpGet:\n      path: /api/health\n      port: 3000\n    initialDelaySeconds: 60\n    timeoutSeconds: 30\n    failureThreshold: 10\n  service:\n    enabled: true\n    type: ClusterIP\n    port: 80\n    targetPort: 3000\n    annotations: {}\n    labels: {}\n  image:\n    registry: docker.io\n    repository: grafana/grafana\n    tag: latest\n    pullPolicy: IfNotPresent\n  resources:\n    limits:\n      cpu: 500m\n      memory: 1Gi\n    requests:\n      cpu: 250m\n      memory: 512Mi\n  persistence:\n    enabled: false\n    accessModes:\n      - ReadWriteOnce\n    size: 10Gi\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\ndatasources:\n  datasources.yaml:\n    apiVersion: 1\n    datasources:\n      - name: Prometheus\n        type: prometheus\n        url: http://prometheus-server.monitoring.svc.cluster.local:80\n        access: proxy\n        isDefault: true\n      - name: Loki\n        type: loki\n        url: http://loki.monitoring.svc.cluster.local:3100\n        access: proxy\n        isDefault: false\nserviceAccount:\n  create: true\n  name: null\nrbac:\n  create: true\n  pspEnabled: false\n  extraRoleRules: []\n  extraClusterRoleRules: []\n"
        ],
        "depends_on": []
      }
    },
    "azurerm_route_table": {
      "ObservTest_aks_route_table": {
        "name": "ObservTest-aks-route-table",
        "location": "East US",
        "resource_group_name": "k8s-rg"
      }
    }
  }
}